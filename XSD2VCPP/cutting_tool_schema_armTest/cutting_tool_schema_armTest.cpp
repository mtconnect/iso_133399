////////////////////////////////////////////////////////////////////////
//
// cutting_tool_schema_armTest.cpp
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////
#include "StdAfx.h"
#include "../cutting_tool_schema_arm/cutting_tool_schema_arm.h"
#include <iostream>
#include <string>
#include <atlstr.h>
#include <stack>

using namespace std;
using namespace cutting_tool_schema_arm;


#ifdef _DEBUG

#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

static tstring ExeDirectory()
{
	TCHAR buf[1000];
	GetModuleFileName(NULL, buf, 1000);
	tstring path(buf);
	path=path.substr( 0, path.find_last_of( '\\' ) +1 );
	return path;
}

inline CString StrFormat(const char* format, ...)
{
	CString str;
	va_list ptr; va_start(ptr, format);
	str.FormatV(format, ptr);
	// Trace model: ATL::CTrace::s_trace.TraceV(m_pszFileName, m_nLineNo, dwCategory, nLevel, pszFmt, ptr);
	va_end(ptr);
	return str;

}

void Traverse(MSXML2::IXMLDOMNodeListPtr list, int level)
{
	long length = list->length;
	for (long i = 0; i < length; ++i)
	{
		MSXML2::IXMLDOMNodePtr node=list->item[i];
		_bstr_t name = node->nodeName;
		for (int j=0;j<level;++j)
		{
			OutputDebugString("  ");
		}
		OutputDebugString(StrFormat("<%s>\n", (LPCSTR) name));
		MSXML2::IXMLDOMNodeListPtr subnodes= node->childNodes;
		Traverse(subnodes, level + 1);
	}
}

void Example()
{
	cutting_tool_schema_arm::Ccutting_tool_schema_arm doc1 = cutting_tool_schema_arm::Ccutting_tool_schema_arm::LoadFromFile(ExeDirectory() + _T("ISO13399.XML"));
	MSXML2::IXMLDOMNodePtr root = doc1.GetNode();
	MSXML2::IXMLDOMNodeListPtr nodelist;
	MSXML2::IXMLDOMNodePtr nextItem;

	MSXML2::IXMLDOMNodeListPtr nodes=doc1.GetNode()->childNodes;
	Traverse(nodes, 0);

	// Example code to create and save a structure:
	cutting_tool_schema_arm::Ccutting_tool_schema_arm doc = cutting_tool_schema_arm::Ccutting_tool_schema_arm::CreateDocument();
	cutting_tool_schema_arm::CuosType uos = doc.uos.append();

	/// ORGANIZATION
	COrganization  org = uos.Organization.append();
	org.Delivery_address.append()="Someotherstreet 2, Sometown, Sweden";
	org.Organization_name.append()="CTC -Cutting Tool Company";
	org.Organization_type.append()="company";
	org.Delivery_address.append() = "Someotherstreet 2, Sometown, Sweden";
	org.Id2.append() = "SE556677889901";
	org.Postal_address.append() = "Box 0000, Sometown, Sweden";
	org.Visitor_address.append() = "Somestreet 1,Sometown, Sweden";

	MSXML2::IXMLDOMElementPtr elem = org.GetNode();
	elem->setAttribute("id", "id-1");

	/// STATE
	CState _state = uos.State.append();
	_state.Name.append() = "Blunt edge";
	elem = _state.GetNode();
	elem->setAttribute("id", "id-3");

	/*
	<Item_characteristic_association id="id-4">
	<Associated_characteristic>
	<grade xsi:nil="true" ref="id-5"/>
	</Associated_characteristic>
	<Associated_item>
	<item_definition xsi:nil="true" ref="id-6"/>
	</Associated_item>
	<Relation_type>has characteristic</Relation_type>
	</Item_characteristic_association>

	ENTITY item_characteristic_association;
	associated_characteristic : item_characteristic_select;
	associated_item           : item_definition;
	relation_type             : OPTIONAL STRING;
	END_ENTITY;
	*/

	// Item_characteristic_association
	CItem_characteristic_association ica = uos.Item_characteristic_association.append();
	elem = ica.GetNode();
	elem->setAttribute("id", "id-4");

	//      associated_item           : item_definition;
	CAssociated_itemType assoc_item = ica.Associated_item.append();	   
	elem= assoc_item.Item_definition.append().GetNode();
	elem->setAttribute("ref", "id-6");
	elem->setAttribute("xsi:nil", "true");

	// associated_characteristic : item_characteristic_select;
	CAssociated_characteristicType assoc_char = ica.Associated_characteristic.append();
	elem= assoc_char.Grade.append().GetNode();
	elem->setAttribute("ref", "id-5");
	elem->setAttribute("xsi:nil", "true");

	doc.SetSchemaLocation(_T("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"")); // optional
	doc.SaveToFile(ExeDirectory() + "cutting_tool_schema_arm1.xml", true);
}

#if defined( __GNUC__ )
int main(int argc, char* argv[])
#else
int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
#endif
{
	tcout << _T("cutting_tool_schema_arm Test Application") << endl;

	try
	{
		CoInitialize(NULL);

		Example();

		CoUninitialize();

		tcout << _T("OK") << endl;
		return 0;
	}
	catch (CXmlException& e)
	{
		tcerr << _T("Error: ") << e.GetInfo().c_str() << endl;
		return 1;
	}
	catch (_com_error& e)
	{
		tcerr << _T("COM-Error from ") << (TCHAR*)e.Source() << _T(":") << endl;
		tcerr << (TCHAR*)e.Description() << endl;
		return 1;
	}
	catch (altova::Exception& exception)
	{
		tcerr << "Exception: " << exception.message() << endl;
		return 1;
	}
	catch (altova::Error& exception)
	{
		tcerr << "Error: " << exception.message() << endl;
		return 1;
	}
	catch (std::exception& e)
	{
		cerr << "Exception: " << e.what() << endl;
		return 1;
	}
	catch (...)
	{
		tcerr << _T("Unknown error") << endl;
		return 1;
	}
}
