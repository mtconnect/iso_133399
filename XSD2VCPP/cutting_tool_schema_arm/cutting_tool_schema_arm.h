////////////////////////////////////////////////////////////////////////
//
// cutting_tool_schema_arm.h
//
// This file was generated by XMLSpy 2011r3sp1 Enterprise Edition.
//
// YOU SHOULD NOT MODIFY THIS FILE, BECAUSE IT WILL BE
// OVERWRITTEN WHEN YOU RE-RUN CODE GENERATION.
//
// Refer to the XMLSpy Documentation for further details.
// http://www.altova.com/xmlspy
//
////////////////////////////////////////////////////////////////////////

#ifndef _INCLUDED_cutting_tool_schema_arm_H_
#define _INCLUDED_cutting_tool_schema_arm_H_

#include "../Altova/xs-types.h"
#include "../AltovaXML/Node.h"
#include "cutting_tool_schema_arm-typeinfo.h"

#define cutting_tool_schema_arm_EXPORT	


namespace cutting_tool_schema_arm
{

	class TypeBase
	{
	protected:
		MSXML2::IXMLDOMNodePtr m_node;
	public:
		TypeBase(MSXML2::IXMLDOMNodePtr const& node) : m_node(node) {}
		MSXML2::IXMLDOMNodePtr GetNode() const { return m_node; }

		cutting_tool_schema_arm_EXPORT MSXML2::IXMLDOMNodePtr GetElementNth(const altova::MemberInfo* member, unsigned index);
		cutting_tool_schema_arm_EXPORT MSXML2::IXMLDOMNodePtr GetElementLast(const altova::MemberInfo* member);
		cutting_tool_schema_arm_EXPORT unsigned CountElement(const altova::MemberInfo* member);
		cutting_tool_schema_arm_EXPORT void RemoveElement(const altova::MemberInfo* member);
		cutting_tool_schema_arm_EXPORT static int GetEnumerationIndex( const string_type sValue, const unsigned enumOffset, const unsigned enumCount);
		cutting_tool_schema_arm_EXPORT static string_type GetEnumerationValue( const int index, const unsigned enumOffset, const unsigned enumCount);
	};

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	class MemberAttribute
	{
		TypeBase& m_owner;
	public:
		typedef const MemberType& argument_type;
		typedef MemberType return_type;

		MemberAttribute(TypeBase& owner) : m_owner(owner) {}
		void operator=(argument_type value);
		operator return_type();
		bool exists();
		void remove();
		int GetEnumerationValue();
		void SetEnumerationValue(const int index);
		altova::meta::Attribute info() const { return altova::meta::Attribute(members + MemberIndex); }
	};

	template <typename MemberType>
	class CastAs 
	{
	public:
		static MemberType Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember);
	};

	template <>
	inline bool CastAs<bool>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToBool(node, pMember);
	}

	template <>
	inline double CastAs<double>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToDouble(node, pMember);
	}

	template <>
	inline int CastAs<int>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToInt(node, pMember);
	}

	template <>
	inline unsigned CastAs<unsigned>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToUInt(node, pMember);
	}

	template <>
	inline __int64 CastAs<__int64>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToInt64(node, pMember);
	}

	template <>
	inline unsigned __int64 CastAs<unsigned __int64>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToUInt64(node, pMember);
	}

	template <>
	inline string_type CastAs<string_type>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToString(node, pMember);
	}

	template <>
	inline std::vector<unsigned char> CastAs<std::vector<unsigned char> >::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToBinary(node, pMember);
	}

	template <>
	inline altova::DateTime CastAs<altova::DateTime>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToDateTime(node, pMember);
	}

	template <>
	inline altova::Duration CastAs<altova::Duration>::Do(MSXML2::IXMLDOMNodePtr const& node, const altova::MemberInfo* pMember)
	{
		return MsxmlTreeOperations::CastToDuration(node, pMember);
	}

	template <typename DataType>
	class Iterator : public DataType
	{
		MsxmlTreeOperations::MemberIterator m_it;
	public:
		Iterator(const MsxmlTreeOperations::MemberIterator& it) : DataType(0), m_it(it) { if (m_it) this->m_node = *m_it; }
		bool operator++() { if (++m_it) { this->m_node = *m_it; return true; } return false; }
		operator bool() const { return m_it; }		

		DataType& operator*() { return *this; }
		DataType* operator->() { return this; }
	};

	template <typename MemberType, unsigned MemberIndex>
	class MemberElement
	{
		TypeBase& m_owner;
	public:
		MemberElement(TypeBase& owner) : m_owner(owner) {}
		MemberType operator[](unsigned index);
		MemberType first();
		MemberType last();
		MemberType append();
		bool exists();
		unsigned count();
		void remove();
		void remove(unsigned index);
		altova::meta::Element info() const { return altova::meta::Element(members + MemberIndex); }

		Iterator<MemberType> all() { return MsxmlTreeOperations::GetElements(m_owner.GetNode(), members + MemberIndex); }
	};

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	void MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::operator=(argument_type value)
	{
		MsxmlTreeOperations::SetValue(m_owner.GetNode(), members + MemberIndex, value);
	}

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::operator typename MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::return_type()
	{
		MSXML2::IXMLDOMNodePtr att = MsxmlTreeOperations::FindAttribute(m_owner.GetNode(), members + MemberIndex);
		if (!MsxmlTreeOperations::IsValid(att))
			throw altova::InvalidOperationException(_T("Cannot read value of non-existent attribute."));
		return CastAs<MemberType>::Do(att, members + MemberIndex);
	}

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	bool MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::exists()
	{
		MSXML2::IXMLDOMNodePtr att = MsxmlTreeOperations::FindAttribute(m_owner.GetNode(), members + MemberIndex);
		return MsxmlTreeOperations::IsValid(att);
	}

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	void MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::remove()
	{
		MsxmlTreeOperations::RemoveAttribute(m_owner.GetNode(), members + MemberIndex);
	}
	
	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	int MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::GetEnumerationValue() {
		MSXML2::IXMLDOMNodePtr att = MsxmlTreeOperations::FindAttribute(m_owner.GetNode(), members + MemberIndex);
		if (!MsxmlTreeOperations::IsValid(att))
			throw altova::InvalidOperationException(_T("Cannot read value of non-existent attribute."));
		string_type sValue = CastAs<string_type>::Do(att, members + MemberIndex);
		return TypeBase::GetEnumerationIndex( sValue, types[members[MemberIndex].DataType].Facets + EnumOffset, EnumCount);
	}

	template <typename MemberType, unsigned MemberIndex, unsigned EnumOffset, unsigned EnumCount>
	void MemberAttribute<MemberType, MemberIndex, EnumOffset, EnumCount>::SetEnumerationValue(const int index) 
	{
		MsxmlTreeOperations::SetValue(m_owner.GetNode(), members + MemberIndex, TypeBase::GetEnumerationValue(index, types[members[MemberIndex].DataType].Facets + EnumOffset, EnumCount) );
	}

	template <typename MemberType, unsigned MemberIndex>
	MemberType MemberElement<MemberType, MemberIndex>::operator[](unsigned index)
	{
		return m_owner.GetElementNth(members + MemberIndex, index);
	}

	template <typename MemberType, unsigned MemberIndex>
	MemberType MemberElement<MemberType, MemberIndex>::first()
	{
		return m_owner.GetElementNth(members + MemberIndex, 0);
	}

	template <typename MemberType, unsigned MemberIndex>
	MemberType MemberElement<MemberType, MemberIndex>::last()
	{
		return m_owner.GetElementLast(members + MemberIndex);
	}

	template <typename MemberType, unsigned MemberIndex>
	MemberType MemberElement<MemberType, MemberIndex>::append()
	{
		return MsxmlTreeOperations::AddElement(m_owner.GetNode(), members + MemberIndex);
	}

	template <typename MemberType, unsigned MemberIndex>
	bool MemberElement<MemberType, MemberIndex>::exists()
	{
		return m_owner.GetElementNth(members + MemberIndex, 0) != 0;
	}

	template <typename MemberType, unsigned MemberIndex>
	unsigned MemberElement<MemberType, MemberIndex>::count()
	{
		return m_owner.CountElement(members + MemberIndex);
	}

	template <typename MemberType, unsigned MemberIndex>
	void MemberElement<MemberType, MemberIndex>::remove()
	{
		m_owner.RemoveElement(members + MemberIndex);
	}

	template <typename MemberType, unsigned MemberIndex>
	void MemberElement<MemberType, MemberIndex>::remove(unsigned index)
	{
		MsxmlTreeOperations::RemoveElement(m_owner.GetNode(), members + MemberIndex, index);
	}

}

namespace cutting_tool_schema_arm
{
// Namespace:  
// SchemaPrefix: 
class CAlias_identification;
class CApplication_context;
class CAssembly_association;
class CAssembly_definition;
class CCartesian_coordinate_space;
class CCartesian_coordinate_space_2d;
class CCartesian_coordinate_space_3d;
class CCartesian_point;
class CClassification_association;
class CClassification_association_relationship;
class CClassification_attribute;
class CClassification_system;
class CCoating;
class CCoupling;
class CCutting_condition;
class CCutting_data_association;
class CDate_time;
class CDigital_document;
class CDigital_file;
class CDin4000_reference;
class CDirection;
class CDocument;
class CDocument_assignment;
class CDocument_content_property;
class CDocument_creation_property;
class CDocument_file;
class CDocument_format_property;
class CDocument_location_property;
class CDocument_representation;
class CDocument_size_property;
class CDocument_type_property;
class CDocument_version;
class CDocument_version_relationship;
class CDuration;
class CEffectivity;
class CEffectivity_assignment;
class CEffectivity_relationship;
class CExternal_file_id_and_location;
class CExternal_geometric_model;
class CExternal_library_reference;
class CExternal_model;
class CExternal_picture;
class CFitting_bounds;
class CGeneral_classification;
class CGeneral_classification_hierarchy;
class CGeometric_model_relationship_with_transformation;
class CGrade;
class CGrade_relationship;
class CItem;
class CItem_characteristic_association;
class CItem_definition;
class CItem_definition_relationship;
class CItem_instance;
class CItem_structure_association;
class CItem_version;
class CItem_version_relationship;
class CLanguage;
class CLimits_and_fits;
class CLocation;
class CMated_item_relationship;
class CMaterial_designation;
class CMating_association;
class CMating_definition;
class CMulti_language_string;
class CNamed_size;
class CNumerical_value;
class COrganization;
class CPerson;
class CPerson_in_organization;
class CPerson_organization_assignment;
class CPhysical_document;
class CPhysical_file;
class CPhysical_item;
class CPhysical_item_definition;
class CPhysical_item_location_association;
class CPhysical_item_state_association;
class CPhysical_item_structure_association;
class CPhysical_item_version;
class CPlib_class_reference;
class CPlib_property_reference;
class CPlus_minus_bounds;
class CProperty;
class CProperty_relationship;
class CProperty_value;
class CProperty_value_association;
class CProperty_value_representation;
class CProperty_value_representation_relationship;
class CQuantified_instance;
class CRealized_item_association;
class CRectangular_size;
class CSpecific_item_classification;
class CSpecific_item_classification_hierarchy;
class CState;
class CString_value;
class CString_with_language;
class CSubstrate;
class CTransformation;
class CTransformation_2d;
class CTransformation_3d;
class CUnit;
class CValue_limit;
class CValue_limitation;
class CValue_list;
class CValue_range;
class CValue_with_unit;
class CWorkpiece_feature;
class Ccutting_tool_schema_arm;
class CDefault_language_stringType;
class CDefault_language_stringType2;
class CuosType;
class CheaderType;
class Cschema_nameType;
class Cschema_nameType2;
class CAlias_scopeType;
class CDescriptionType;
class CIs_applied_toType;
class CDescriptionType2;
class CPlacementType;
class CRelatedType;
class CRelatingType;
class CAssociated_item_versionType;
class CContextsType;
class CNameType;
class CUnit_of_valuesType;
class CCoordinatesType;
class CCoordinatesType2;
class CAssociated_classificationType;
class CClassified_elementType;
class CRelatedType2;
class CRelatingType2;
class CAllowed_valueType;
class CAssociated_classificationType2;
class CAttribute_definitionType;
class CDescriptionType3;
class CNameType2;
class CDescriptionType4;
class CPiecesType;
class CSizeType;
class CAssociated_materialType;
class CDepth_of_cutType;
class CFeedType;
class CSpeedType;
class CAssociated_document_versionType;
class CCommon_locationType;
class CContentType;
class CCreationType;
class CDescriptionType5;
class CRepresentation_formatType;
class CSizeType2;
class CFileType;
class CContentType2;
class CCreationType2;
class CDocument_file_typeType;
class CExternal_id_and_locationType;
class CFile_formatType;
class CSizeType3;
class CDescriptionType6;
class CDirection_ratiosType;
class CDirection_ratiosType2;
class CDescriptionType7;
class CNameType3;
class CAssigned_documentType;
class CIs_assigned_toType;
class CLanguagesType;
class CReal_world_scaleType;
class CSize_formatType;
class CFile_sizeType;
class CPage_countType;
class CUsed_classification_systemType;
class CAssociated_documentType;
class CDescriptionType8;
class CDescriptionType9;
class CRelatedType3;
class CRelatingType3;
class CConcerned_organizationType;
class CDescriptionType10;
class CEnd_definitionType;
class CPeriodType;
class CStart_definitionType;
class CAssigned_effectivityType;
class CEffective_elementType;
class CDescriptionType11;
class CRelatedType4;
class CRelatingType4;
class CLocationType;
class CDescriptionType12;
class CIs_defined_asType;
class CIs_defined_inType;
class CClassification_sourceType;
class CDescriptionType13;
class CUsed_classification_systemType2;
class CSub_classificationType;
class CSuper_classificationType;
class CDescriptionType14;
class CModel_placementType;
class CRelatedType5;
class CRelatingType5;
class CCoatingType;
class CCutting_conditionType;
class CSubstrateType;
class CWorkpiece_materialType;
class CRelatedType6;
class CRelatingType6;
class CDescriptionType15;
class CNameType4;
class CAssociated_characteristicType;
class CAssociated_itemType;
class CDescriptionType16;
class CRelatedType7;
class CRelatingType7;
class CDefinitionType;
class CDescriptionType17;
class CAssociated_itemType2;
class CDescriptionType18;
class CDescriptionType19;
class CRelatedType8;
class CRelatingType8;
class CMating_materialType;
class CRelatedType9;
class CRelatingType9;
class CAdditional_language_stringType;
class CPrimary_language_stringType;
class CDensityType;
class CHeightType;
class CWidthType;
class CReferenced_standardType;
class CUnit_componentType;
class CAssociated_organizationType;
class CAssociated_personType;
class CAssigned_person_organizationType;
class CDescriptionType20;
class CIs_applied_toType2;
class CFileType2;
class CLocated_itemType;
class CLocationType2;
class CAssociated_physical_itemType;
class CAssociated_stateType;
class CRelatedType10;
class CRelatingType10;
class CName_scopeType;
class CAllowed_unitType;
class CDescriptionType21;
class CProperty_sourceType;
class CDescriptionType22;
class CRelatedType11;
class CRelatingType11;
class CDescribed_elementType;
class CDescribing_property_valueType;
class CDescriptionType23;
class CValidity_contextType;
class CDefinitionType2;
class CGlobal_unitType;
class CSpecified_valueType;
class CDescriptionType24;
class CRelatedType12;
class CRelatingType12;
class CQuantityType;
class CPhysical_itemType;
class CRealized_item_versionType;
class CAssociated_itemType3;
class CDescriptionType25;
class CSub_classificationType2;
class CSuper_classificationType2;
class CValue_specificationType;
class CLanguage_specificationType;
class CAxis_1Type;
class CAxis_2Type;
class CLocal_originType;
class CAxis_3Type;
class CIs_defined_byType;
class CLimited_valueType;
class CValuesType;
class CDescriptionType26;
class CRepresentationType;
// Namespace: ExpressHeader 
// SchemaPrefix: exp

namespace exp
{	
class Cfile_description;
class Cfile_name;
class Cfile_schema;
class Cschema_identifiersType;

} // namespace exp

// Namespace: http://www.w3.org/2001/XMLSchema 
// SchemaPrefix: xs

namespace xs
{	
class CENTITIES;
class CENTITY;
class CID;
class CIDREF;
class CIDREFS;
class CNCName;
class CNMTOKEN;
class CNMTOKENS;
class CNOTATION;
class CName;
class CQName;
class CanySimpleType;
class CanyType;
class CanyURI;
class Cbase64Binary;
class Cboolean;
class Cbyte;
class Cdate;
class CdateTime;
class Cdecimal;
class Cdouble;
class Cduration;
class Cfloat;
class CgDay;
class CgMonth;
class CgMonthDay;
class CgYear;
class CgYearMonth;
class ChexBinary;
class Cint;
class Cinteger;
class Clanguage;
class Clong;
class CnegativeInteger;
class CnonNegativeInteger;
class CnonPositiveInteger;
class CnormalizedString;
class CpositiveInteger;
class Cshort;
class Cstring;
class Ctime;
class Ctoken;
class CunsignedByte;
class CunsignedInt;
class CunsignedLong;
class CunsignedShort;
class CstringType;
class CbooleanType;

} // namespace xs


}

// include individual types

// namespace ""
#include "type_.CAlias_identification.h"
#include "type_.CApplication_context.h"
#include "type_.CAssembly_association.h"
#include "type_.CAssembly_definition.h"
#include "type_.CCartesian_coordinate_space.h"
#include "type_.CCartesian_coordinate_space_2d.h"
#include "type_.CCartesian_coordinate_space_3d.h"
#include "type_.CCartesian_point.h"
#include "type_.CClassification_association.h"
#include "type_.CClassification_association_relationship.h"
#include "type_.CClassification_attribute.h"
#include "type_.CClassification_system.h"
#include "type_.CCoating.h"
#include "type_.CCoupling.h"
#include "type_.CCutting_condition.h"
#include "type_.CCutting_data_association.h"
#include "type_.CDate_time.h"
#include "type_.CDigital_document.h"
#include "type_.CDigital_file.h"
#include "type_.CDin4000_reference.h"
#include "type_.CDirection.h"
#include "type_.CDocument.h"
#include "type_.CDocument_assignment.h"
#include "type_.CDocument_content_property.h"
#include "type_.CDocument_creation_property.h"
#include "type_.CDocument_file.h"
#include "type_.CDocument_format_property.h"
#include "type_.CDocument_location_property.h"
#include "type_.CDocument_representation.h"
#include "type_.CDocument_size_property.h"
#include "type_.CDocument_type_property.h"
#include "type_.CDocument_version.h"
#include "type_.CDocument_version_relationship.h"
#include "type_.CDuration.h"
#include "type_.CEffectivity.h"
#include "type_.CEffectivity_assignment.h"
#include "type_.CEffectivity_relationship.h"
#include "type_.CExternal_file_id_and_location.h"
#include "type_.CExternal_geometric_model.h"
#include "type_.CExternal_library_reference.h"
#include "type_.CExternal_model.h"
#include "type_.CExternal_picture.h"
#include "type_.CFitting_bounds.h"
#include "type_.CGeneral_classification.h"
#include "type_.CGeneral_classification_hierarchy.h"
#include "type_.CGeometric_model_relationship_with_transformation.h"
#include "type_.CGrade.h"
#include "type_.CGrade_relationship.h"
#include "type_.CItem.h"
#include "type_.CItem_characteristic_association.h"
#include "type_.CItem_definition.h"
#include "type_.CItem_definition_relationship.h"
#include "type_.CItem_instance.h"
#include "type_.CItem_structure_association.h"
#include "type_.CItem_version.h"
#include "type_.CItem_version_relationship.h"
#include "type_.CLanguage.h"
#include "type_.CLimits_and_fits.h"
#include "type_.CLocation.h"
#include "type_.CMated_item_relationship.h"
#include "type_.CMaterial_designation.h"
#include "type_.CMating_association.h"
#include "type_.CMating_definition.h"
#include "type_.CMulti_language_string.h"
#include "type_.CNamed_size.h"
#include "type_.CNumerical_value.h"
#include "type_.COrganization.h"
#include "type_.CPerson.h"
#include "type_.CPerson_in_organization.h"
#include "type_.CPerson_organization_assignment.h"
#include "type_.CPhysical_document.h"
#include "type_.CPhysical_file.h"
#include "type_.CPhysical_item.h"
#include "type_.CPhysical_item_definition.h"
#include "type_.CPhysical_item_location_association.h"
#include "type_.CPhysical_item_state_association.h"
#include "type_.CPhysical_item_structure_association.h"
#include "type_.CPhysical_item_version.h"
#include "type_.CPlib_class_reference.h"
#include "type_.CPlib_property_reference.h"
#include "type_.CPlus_minus_bounds.h"
#include "type_.CProperty.h"
#include "type_.CProperty_relationship.h"
#include "type_.CProperty_value.h"
#include "type_.CProperty_value_association.h"
#include "type_.CProperty_value_representation.h"
#include "type_.CProperty_value_representation_relationship.h"
#include "type_.CQuantified_instance.h"
#include "type_.CRealized_item_association.h"
#include "type_.CRectangular_size.h"
#include "type_.CSpecific_item_classification.h"
#include "type_.CSpecific_item_classification_hierarchy.h"
#include "type_.CState.h"
#include "type_.CString_value.h"
#include "type_.CString_with_language.h"
#include "type_.CSubstrate.h"
#include "type_.CTransformation.h"
#include "type_.CTransformation_2d.h"
#include "type_.CTransformation_3d.h"
#include "type_.CUnit.h"
#include "type_.CValue_limit.h"
#include "type_.CValue_limitation.h"
#include "type_.CValue_list.h"
#include "type_.CValue_range.h"
#include "type_.CValue_with_unit.h"
#include "type_.CWorkpiece_feature.h"
#include "type_.Ccutting_tool_schema_arm.h"
#include "type_.CDefault_language_stringType.h"
#include "type_.CDefault_language_stringType2.h"
#include "type_.CuosType.h"
#include "type_.CheaderType.h"
#include "type_.Cschema_nameType.h"
#include "type_.Cschema_nameType2.h"
#include "type_.CAlias_scopeType.h"
#include "type_.CDescriptionType.h"
#include "type_.CIs_applied_toType.h"
#include "type_.CDescriptionType2.h"
#include "type_.CPlacementType.h"
#include "type_.CRelatedType.h"
#include "type_.CRelatingType.h"
#include "type_.CAssociated_item_versionType.h"
#include "type_.CContextsType.h"
#include "type_.CNameType.h"
#include "type_.CUnit_of_valuesType.h"
#include "type_.CCoordinatesType.h"
#include "type_.CCoordinatesType2.h"
#include "type_.CAssociated_classificationType.h"
#include "type_.CClassified_elementType.h"
#include "type_.CRelatedType2.h"
#include "type_.CRelatingType2.h"
#include "type_.CAllowed_valueType.h"
#include "type_.CAssociated_classificationType2.h"
#include "type_.CAttribute_definitionType.h"
#include "type_.CDescriptionType3.h"
#include "type_.CNameType2.h"
#include "type_.CDescriptionType4.h"
#include "type_.CPiecesType.h"
#include "type_.CSizeType.h"
#include "type_.CAssociated_materialType.h"
#include "type_.CDepth_of_cutType.h"
#include "type_.CFeedType.h"
#include "type_.CSpeedType.h"
#include "type_.CAssociated_document_versionType.h"
#include "type_.CCommon_locationType.h"
#include "type_.CContentType.h"
#include "type_.CCreationType.h"
#include "type_.CDescriptionType5.h"
#include "type_.CRepresentation_formatType.h"
#include "type_.CSizeType2.h"
#include "type_.CFileType.h"
#include "type_.CContentType2.h"
#include "type_.CCreationType2.h"
#include "type_.CDocument_file_typeType.h"
#include "type_.CExternal_id_and_locationType.h"
#include "type_.CFile_formatType.h"
#include "type_.CSizeType3.h"
#include "type_.CDescriptionType6.h"
#include "type_.CDirection_ratiosType.h"
#include "type_.CDirection_ratiosType2.h"
#include "type_.CDescriptionType7.h"
#include "type_.CNameType3.h"
#include "type_.CAssigned_documentType.h"
#include "type_.CIs_assigned_toType.h"
#include "type_.CLanguagesType.h"
#include "type_.CReal_world_scaleType.h"
#include "type_.CSize_formatType.h"
#include "type_.CFile_sizeType.h"
#include "type_.CPage_countType.h"
#include "type_.CUsed_classification_systemType.h"
#include "type_.CAssociated_documentType.h"
#include "type_.CDescriptionType8.h"
#include "type_.CDescriptionType9.h"
#include "type_.CRelatedType3.h"
#include "type_.CRelatingType3.h"
#include "type_.CConcerned_organizationType.h"
#include "type_.CDescriptionType10.h"
#include "type_.CEnd_definitionType.h"
#include "type_.CPeriodType.h"
#include "type_.CStart_definitionType.h"
#include "type_.CAssigned_effectivityType.h"
#include "type_.CEffective_elementType.h"
#include "type_.CDescriptionType11.h"
#include "type_.CRelatedType4.h"
#include "type_.CRelatingType4.h"
#include "type_.CLocationType.h"
#include "type_.CDescriptionType12.h"
#include "type_.CIs_defined_asType.h"
#include "type_.CIs_defined_inType.h"
#include "type_.CClassification_sourceType.h"
#include "type_.CDescriptionType13.h"
#include "type_.CUsed_classification_systemType2.h"
#include "type_.CSub_classificationType.h"
#include "type_.CSuper_classificationType.h"
#include "type_.CDescriptionType14.h"
#include "type_.CModel_placementType.h"
#include "type_.CRelatedType5.h"
#include "type_.CRelatingType5.h"
#include "type_.CCoatingType.h"
#include "type_.CCutting_conditionType.h"
#include "type_.CSubstrateType.h"
#include "type_.CWorkpiece_materialType.h"
#include "type_.CRelatedType6.h"
#include "type_.CRelatingType6.h"
#include "type_.CDescriptionType15.h"
#include "type_.CNameType4.h"
#include "type_.CAssociated_characteristicType.h"
#include "type_.CAssociated_itemType.h"
#include "type_.CDescriptionType16.h"
#include "type_.CRelatedType7.h"
#include "type_.CRelatingType7.h"
#include "type_.CDefinitionType.h"
#include "type_.CDescriptionType17.h"
#include "type_.CAssociated_itemType2.h"
#include "type_.CDescriptionType18.h"
#include "type_.CDescriptionType19.h"
#include "type_.CRelatedType8.h"
#include "type_.CRelatingType8.h"
#include "type_.CMating_materialType.h"
#include "type_.CRelatedType9.h"
#include "type_.CRelatingType9.h"
#include "type_.CAdditional_language_stringType.h"
#include "type_.CPrimary_language_stringType.h"
#include "type_.CDensityType.h"
#include "type_.CHeightType.h"
#include "type_.CWidthType.h"
#include "type_.CReferenced_standardType.h"
#include "type_.CUnit_componentType.h"
#include "type_.CAssociated_organizationType.h"
#include "type_.CAssociated_personType.h"
#include "type_.CAssigned_person_organizationType.h"
#include "type_.CDescriptionType20.h"
#include "type_.CIs_applied_toType2.h"
#include "type_.CFileType2.h"
#include "type_.CLocated_itemType.h"
#include "type_.CLocationType2.h"
#include "type_.CAssociated_physical_itemType.h"
#include "type_.CAssociated_stateType.h"
#include "type_.CRelatedType10.h"
#include "type_.CRelatingType10.h"
#include "type_.CName_scopeType.h"
#include "type_.CAllowed_unitType.h"
#include "type_.CDescriptionType21.h"
#include "type_.CProperty_sourceType.h"
#include "type_.CDescriptionType22.h"
#include "type_.CRelatedType11.h"
#include "type_.CRelatingType11.h"
#include "type_.CDescribed_elementType.h"
#include "type_.CDescribing_property_valueType.h"
#include "type_.CDescriptionType23.h"
#include "type_.CValidity_contextType.h"
#include "type_.CDefinitionType2.h"
#include "type_.CGlobal_unitType.h"
#include "type_.CSpecified_valueType.h"
#include "type_.CDescriptionType24.h"
#include "type_.CRelatedType12.h"
#include "type_.CRelatingType12.h"
#include "type_.CQuantityType.h"
#include "type_.CPhysical_itemType.h"
#include "type_.CRealized_item_versionType.h"
#include "type_.CAssociated_itemType3.h"
#include "type_.CDescriptionType25.h"
#include "type_.CSub_classificationType2.h"
#include "type_.CSuper_classificationType2.h"
#include "type_.CValue_specificationType.h"
#include "type_.CLanguage_specificationType.h"
#include "type_.CAxis_1Type.h"
#include "type_.CAxis_2Type.h"
#include "type_.CLocal_originType.h"
#include "type_.CAxis_3Type.h"
#include "type_.CIs_defined_byType.h"
#include "type_.CLimited_valueType.h"
#include "type_.CValuesType.h"
#include "type_.CDescriptionType26.h"
#include "type_.CRepresentationType.h"

// namespace "ExpressHeader"
#include "type_exp.Cfile_description.h"
#include "type_exp.Cfile_name.h"
#include "type_exp.Cfile_schema.h"
#include "type_exp.Cschema_identifiersType.h"

// namespace "http://www.w3.org/2001/XMLSchema"
#include "type_xs.CENTITIES.h"
#include "type_xs.CENTITY.h"
#include "type_xs.CID.h"
#include "type_xs.CIDREF.h"
#include "type_xs.CIDREFS.h"
#include "type_xs.CNCName.h"
#include "type_xs.CNMTOKEN.h"
#include "type_xs.CNMTOKENS.h"
#include "type_xs.CNOTATION.h"
#include "type_xs.CName.h"
#include "type_xs.CQName.h"
#include "type_xs.CanySimpleType.h"
#include "type_xs.CanyType.h"
#include "type_xs.CanyURI.h"
#include "type_xs.Cbase64Binary.h"
#include "type_xs.Cboolean.h"
#include "type_xs.Cbyte.h"
#include "type_xs.Cdate.h"
#include "type_xs.CdateTime.h"
#include "type_xs.Cdecimal.h"
#include "type_xs.Cdouble.h"
#include "type_xs.Cduration.h"
#include "type_xs.Cfloat.h"
#include "type_xs.CgDay.h"
#include "type_xs.CgMonth.h"
#include "type_xs.CgMonthDay.h"
#include "type_xs.CgYear.h"
#include "type_xs.CgYearMonth.h"
#include "type_xs.ChexBinary.h"
#include "type_xs.Cint.h"
#include "type_xs.Cinteger.h"
#include "type_xs.Clanguage.h"
#include "type_xs.Clong.h"
#include "type_xs.CnegativeInteger.h"
#include "type_xs.CnonNegativeInteger.h"
#include "type_xs.CnonPositiveInteger.h"
#include "type_xs.CnormalizedString.h"
#include "type_xs.CpositiveInteger.h"
#include "type_xs.Cshort.h"
#include "type_xs.Cstring.h"
#include "type_xs.Ctime.h"
#include "type_xs.Ctoken.h"
#include "type_xs.CunsignedByte.h"
#include "type_xs.CunsignedInt.h"
#include "type_xs.CunsignedLong.h"
#include "type_xs.CunsignedShort.h"
#include "type_xs.CstringType.h"
#include "type_xs.CbooleanType.h"

// finished

#endif //_INCLUDED_cutting_tool_schema_arm_H_
